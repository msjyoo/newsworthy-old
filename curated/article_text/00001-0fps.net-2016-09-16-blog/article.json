{
    "title": "Ambient occlusion for Minecraft-like worlds",
    "publication_date": "2013-07-03",
    "p": [
        {"type": "p", "text": "It has been a while since I’ve written about Minecraft-like games, and so today I figured I’d take a moment to discuss something which seems to come up a lot in online discussions, specifically how to implement ambient occlusion in a Minecraft-like game:"},
        {"type": "image", "hash": "", "caption": "Smooth lighting in Minecraft. (c) Mojang AB. Image obtained from Minecraft wiki.",
            "links": [{"start_code_point": 65, "end_code_point": 79, "len": 14, "content": "Minecraft wiki"}]},
        {"type": "p", "text": "Ambient occlusion was originally introduced into Minecraft as a mod, and eventually incorporated into the core Minecraft engine along with a host of other lighting improvements under the general name of “smooth lighting”. To those who are in-the-know on voxel engine development, this stuff is all pretty standard, but I haven’t yet seen it written up in an accessible format yet.  So I decided to write a quick blog post on it, as well as discuss a few of the small technical issues that come up when you implement it within a system that uses greedy meshing.",
            "links": [{"start_code_point": 545, "end_code_point": 559, "len": 14, "content": "greedy meshing"}]},
        {"type": "h", "text": "Ambient Occlusion"},
        {"type": "p", "text": "Ambient occlusion is a simple and effective technique for improving the quality of lighting in virtual environments.  The basic idea is to approximate the amount of ambient light that is propagated through the scene towards a point from distant reflections.  The basis for this idea is a heuristic or empirical argument, and can be computed by finding the amount of surface area on a hemisphere which is visible from a given point:"},
        {"type": "p", "text": "Adding an ambient occlusion factor to a scene can greatly improve the visual fidelity, and so a lot of thought has gone into methods for calculating and approximating ambient occlusion efficiently.  Broadly speaking, there are two general approaches to accessibility computation:"},
        {"type": "li", "text": "Static algorithms: Which try to precalculate ambient occlusion for geometry up front"},
        {"type": "li", "text": "Dynamic algorithms: Which try to compute accessibility from changing or dynamic data."},
        {"type": "p", "text": "Perhaps the most well known of these approaches is the famous screen-space ambient occlusion algorithm:"},
        {"type": "p", "text": "P. Shanmugam, O. Arikan. “Hardware accelerated ambient occlusion techniques on GPUs“.  SIGGRAPH 2007."},
        {"type": "p", "text": "The general idea is to read out the contents of the depth buffer, and then use this geometry to approximate the accessibility of each pixel.  This can then be used to shade all of the pixels on the screen:"},
        {"type": "p", "text": "Screen space ambient occlusion is nice in that it is really easy to integrate into an existing rendering pipeline — especially with deferred shading — (it is just a post process!) but the downside is that because the depth buffer is not a true model of the scene geometry it can introduce many weird artefacts.  This link has a brief (humorous/NSFW) survey of these flaws."},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""},
        {"type": "p", "text": ""}
    ]
}